// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logd.proto

package logd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRequest struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b597ae122605a96b, []int{0}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SetRequest struct {
	Entry                []byte   `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}
func (*SetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b597ae122605a96b, []int{1}
}

func (m *SetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRequest.Unmarshal(m, b)
}
func (m *SetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRequest.Marshal(b, m, deterministic)
}
func (m *SetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRequest.Merge(m, src)
}
func (m *SetRequest) XXX_Size() int {
	return xxx_messageInfo_SetRequest.Size(m)
}
func (m *SetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRequest proto.InternalMessageInfo

func (m *SetRequest) GetEntry() []byte {
	if m != nil {
		return m.Entry
	}
	return nil
}

type GetReply struct {
	Entry                int64    `protobuf:"varint,1,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b597ae122605a96b, []int{2}
}

func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetEntry() int64 {
	if m != nil {
		return m.Entry
	}
	return 0
}

type SetReply struct {
	Offset               []byte   `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetReply) Reset()         { *m = SetReply{} }
func (m *SetReply) String() string { return proto.CompactTextString(m) }
func (*SetReply) ProtoMessage()    {}
func (*SetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b597ae122605a96b, []int{3}
}

func (m *SetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetReply.Unmarshal(m, b)
}
func (m *SetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetReply.Marshal(b, m, deterministic)
}
func (m *SetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReply.Merge(m, src)
}
func (m *SetReply) XXX_Size() int {
	return xxx_messageInfo_SetReply.Size(m)
}
func (m *SetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetReply proto.InternalMessageInfo

func (m *SetReply) GetOffset() []byte {
	if m != nil {
		return m.Offset
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "logd.GetRequest")
	proto.RegisterType((*SetRequest)(nil), "logd.SetRequest")
	proto.RegisterType((*GetReply)(nil), "logd.GetReply")
	proto.RegisterType((*SetReply)(nil), "logd.SetReply")
}

func init() { proto.RegisterFile("logd.proto", fileDescriptor_b597ae122605a96b) }

var fileDescriptor_b597ae122605a96b = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xc9, 0x4f, 0x4f,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x54, 0xb8, 0xb8, 0xdc, 0x53,
	0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0xf2, 0xd3, 0xd2, 0x8a,
	0x53, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0xa0, 0x3c, 0x25, 0x25, 0x2e, 0xae, 0x60,
	0x84, 0x2a, 0x11, 0x2e, 0xd6, 0xd4, 0xbc, 0x92, 0xa2, 0x4a, 0xb0, 0x22, 0x9e, 0x20, 0x08, 0x47,
	0x49, 0x81, 0x8b, 0x03, 0x6c, 0x52, 0x41, 0x4e, 0x25, 0xaa, 0x0a, 0x66, 0x98, 0x0a, 0x25, 0x2e,
	0x8e, 0x60, 0x98, 0x0a, 0x54, 0x9b, 0x78, 0x60, 0x36, 0x19, 0xc5, 0x73, 0xb1, 0xf8, 0xe4, 0xa7,
	0xa7, 0x08, 0xe9, 0x70, 0xb1, 0x25, 0x16, 0x14, 0xa4, 0xe6, 0xa5, 0x08, 0x09, 0xe8, 0x81, 0x1d,
	0x8d, 0xb0, 0x5f, 0x8a, 0x0f, 0x49, 0xa4, 0x20, 0xa7, 0x52, 0x89, 0x41, 0x48, 0x93, 0x8b, 0x39,
	0x3d, 0xb5, 0x04, 0xa6, 0xd4, 0x1d, 0x43, 0xa9, 0x3b, 0x5c, 0xa9, 0x13, 0x5b, 0x14, 0xd8, 0xe3,
	0x49, 0x6c, 0xe0, 0x50, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x88, 0x00, 0xba, 0x55, 0x13,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogdClient is the client API for Logd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogdClient interface {
	Append(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type logdClient struct {
	cc *grpc.ClientConn
}

func NewLogdClient(cc *grpc.ClientConn) LogdClient {
	return &logdClient{cc}
}

func (c *logdClient) Append(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetReply, error) {
	out := new(SetReply)
	err := c.cc.Invoke(ctx, "/logd.Logd/append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logdClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/logd.Logd/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogdServer is the server API for Logd service.
type LogdServer interface {
	Append(context.Context, *SetRequest) (*SetReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
}

// UnimplementedLogdServer can be embedded to have forward compatible implementations.
type UnimplementedLogdServer struct {
}

func (*UnimplementedLogdServer) Append(ctx context.Context, req *SetRequest) (*SetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedLogdServer) Get(ctx context.Context, req *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterLogdServer(s *grpc.Server, srv LogdServer) {
	s.RegisterService(&_Logd_serviceDesc, srv)
}

func _Logd_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogdServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logd.Logd/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogdServer).Append(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logd_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogdServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logd.Logd/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogdServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logd.Logd",
	HandlerType: (*LogdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "append",
			Handler:    _Logd_Append_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Logd_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logd.proto",
}
