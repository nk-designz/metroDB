// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logd.proto

package logd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogdRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogdRequest) Reset()         { *m = LogdRequest{} }
func (m *LogdRequest) String() string { return proto.CompactTextString(m) }
func (*LogdRequest) ProtoMessage()    {}
func (*LogdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b597ae122605a96b, []int{0}
}

func (m *LogdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogdRequest.Unmarshal(m, b)
}
func (m *LogdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogdRequest.Marshal(b, m, deterministic)
}
func (m *LogdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogdRequest.Merge(m, src)
}
func (m *LogdRequest) XXX_Size() int {
	return xxx_messageInfo_LogdRequest.Size(m)
}
func (m *LogdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogdRequest proto.InternalMessageInfo

func (m *LogdRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LogdReply struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogdReply) Reset()         { *m = LogdReply{} }
func (m *LogdReply) String() string { return proto.CompactTextString(m) }
func (*LogdReply) ProtoMessage()    {}
func (*LogdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b597ae122605a96b, []int{1}
}

func (m *LogdReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogdReply.Unmarshal(m, b)
}
func (m *LogdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogdReply.Marshal(b, m, deterministic)
}
func (m *LogdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogdReply.Merge(m, src)
}
func (m *LogdReply) XXX_Size() int {
	return xxx_messageInfo_LogdReply.Size(m)
}
func (m *LogdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LogdReply.DiscardUnknown(m)
}

var xxx_messageInfo_LogdReply proto.InternalMessageInfo

func (m *LogdReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*LogdRequest)(nil), "LogdRequest")
	proto.RegisterType((*LogdReply)(nil), "LogdReply")
}

func init() { proto.RegisterFile("logd.proto", fileDescriptor_b597ae122605a96b) }

var fileDescriptor_b597ae122605a96b = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xc9, 0x4f, 0x4f,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe4, 0xe2, 0xf6, 0xc9, 0x4f, 0x4f, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0xe4, 0xb9, 0x38, 0x21, 0x4a, 0x0a, 0x72, 0x2a, 0xb1,
	0x29, 0x30, 0x6a, 0x61, 0xe4, 0x62, 0x01, 0xa9, 0x10, 0x52, 0xe1, 0x62, 0x4b, 0x2c, 0x28, 0x48,
	0xcd, 0x4b, 0x11, 0xe2, 0xd1, 0x43, 0x32, 0x55, 0x8a, 0x4b, 0x0f, 0x6e, 0x80, 0x12, 0x83, 0x90,
	0x26, 0x17, 0x77, 0x51, 0x6a, 0x62, 0x8a, 0x6b, 0x5e, 0x49, 0x51, 0xa5, 0x63, 0x09, 0x5e, 0xa5,
	0xda, 0x5c, 0xbc, 0x70, 0xa5, 0x3e, 0x89, 0xc5, 0x78, 0x15, 0x27, 0xb1, 0x81, 0x7d, 0x64, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x1b, 0x1b, 0xfa, 0xdf, 0x00, 0x00, 0x00,
}
